const axios = require('axios');
const sharp = require('sharp');
const cloudinaryService = require('./cloudinary');

const STABILITY_API_KEY = process.env.STABILITY_API_KEY;
const STABILITY_API_URL = 'https://api.stability.ai/v1/generation/stable-diffusion-xl-1024-v1-0/text-to-image';

// Style presets with optimal settings
const STYLE_CONFIGS = {
  photographic: {
    suffix: ', professional photography, sharp focus, natural lighting, high quality',
    cfg_scale: 7
  },
  cinematic: {
    suffix: ', cinematic lighting, dramatic, movie still, 35mm film, high quality',
    cfg_scale: 8
  },
  'digital-art': {
    suffix: ', digital art, detailed, vibrant colors, trending on artstation, high quality',
    cfg_scale: 7
  },
  anime: {
    suffix: ', anime style, detailed, vibrant colors, high quality',
    cfg_scale: 8
  },
  '3d-model': {
    suffix: ', 3d render, octane render, unreal engine, high detail, professional',
    cfg_scale: 7
  },
  'analog-film': {
    suffix: ', analog film photography, grainy, vintage, 35mm photograph',
    cfg_scale: 7
  },
  'comic-book': {
    suffix: ', comic book style, bold lines, vibrant colors, detailed',
    cfg_scale: 8
  },
  'fantasy-art': {
    suffix: ', fantasy art, magical, detailed, epic, high quality',
    cfg_scale: 8
  },
  'line-art': {
    suffix: ', line art, clean lines, detailed, professional',
    cfg_scale: 7
  },
  'neon-punk': {
    suffix: ', cyberpunk, neon lights, futuristic, dystopian, detailed',
    cfg_scale: 8
  },
  origami: {
    suffix: ', origami style, paper craft, folded paper, artistic',
    cfg_scale: 7
  },
  'low-poly': {
    suffix: ', low poly art, geometric, polygonal, clean',
    cfg_scale: 7
  }
};

// Platform-specific dimensions
const PLATFORM_SIZES = {
  linkedin: { width: 1200, height: 627 },
  twitter: { width: 1200, height: 675 },
  instagram: { width: 1080, height: 1080 },
  universal: { width: 1200, height: 630 }
};

/**
 * Generate image with Stability AI
 * @param {string} prompt - User's image description
 * @param {string} style - Style preset name
 * @param {string} platform - Target platform for sizing
 * @param {string} userId - User ID for Cloudinary folder organization
 * @returns {Promise<Object>}
 */
async function generateImage(prompt, style = 'photographic', platform = 'universal', userId) {
  try {
    console.log(`üé® Generating image: "${prompt}" (${style}, ${platform})`);

    // Get style configuration
    const styleConfig = STYLE_CONFIGS[style] || STYLE_CONFIGS.photographic;
    
    // Enhance prompt with style
    const enhancedPrompt = prompt + styleConfig.suffix;
    
    // Call Stability AI API
    const response = await axios.post(
      STABILITY_API_URL,
      {
        text_prompts: [
          {
            text: enhancedPrompt,
            weight: 1
          }
        ],
        cfg_scale: styleConfig.cfg_scale,
        height: 1024,
        width: 1024,
        steps: 30,
        samples: 1
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Bearer ${STABILITY_API_KEY}`
        }
      }
    );

    // Extract base64 image
    const imageData = response.data.artifacts[0];
    const base64Image = imageData.base64;

    console.log('‚úÖ Image generated by Stability AI');

    // Resize for target platform
    const platformSize = PLATFORM_SIZES[platform] || PLATFORM_SIZES.universal;
    const resizedBuffer = await resizeImage(base64Image, platformSize);

    console.log(`üìê Resized to ${platformSize.width}x${platformSize.height} for ${platform}`);

    // Upload to Cloudinary (if configured)
    let imageUrl;
    try {
      const cloudinaryResult = await cloudinaryService.uploadBase64Image(
        resizedBuffer.toString('base64'),
        userId
      );

      if (cloudinaryResult.success) {
        console.log('‚úÖ Uploaded to Cloudinary:', cloudinaryResult.url);
        imageUrl = cloudinaryResult.url;
      } else {
        throw new Error('Cloudinary upload failed');
      }
    } catch (cloudinaryError) {
      console.warn('‚ö†Ô∏è Cloudinary not configured, using base64 data URL');
      // Return base64 data URL if Cloudinary fails
      imageUrl = `data:image/png;base64,${resizedBuffer.toString('base64')}`;
    }
    
    return {
      success: true,
      imageUrl: imageUrl,
      platform: platform,
      style: style,
      originalPrompt: prompt,
      dimensions: platformSize
    };

  } catch (error) {
    console.error('‚ùå AI Image generation error:', error.response?.data || error.message);
    
    // Handle specific errors
    if (error.response?.status === 402) {
      return {
        success: false,
        error: 'Monthly quota exceeded. Please upgrade your Stability AI plan or try again next month.'
      };
    }
    
    if (error.response?.status === 401) {
      return {
        success: false,
        error: 'Invalid Stability AI API key. Please check your configuration.'
      };
    }
    
    return {
      success: false,
      error: error.response?.data?.message || error.message || 'Image generation failed'
    };
  }
}

/**
 * Resize image to platform-specific dimensions
 * @param {string} base64Image - Base64 encoded image
 * @param {Object} size - Target dimensions {width, height}
 * @returns {Promise<Buffer>}
 */
async function resizeImage(base64Image, size) {
  const buffer = Buffer.from(base64Image, 'base64');
  
  return await sharp(buffer)
    .resize(size.width, size.height, {
      fit: 'cover',
      position: 'center'
    })
    .png({ quality: 90 })
    .toBuffer();
}

/**
 * Get available style presets
 * @returns {Array<Object>}
 */
function getAvailableStyles() {
  return [
    { value: 'photographic', label: 'üì∑ Photographic', description: 'Natural, realistic photos' },
    { value: 'cinematic', label: 'üé¨ Cinematic', description: 'Dramatic movie-style lighting' },
    { value: 'digital-art', label: 'üé® Digital Art', description: 'Modern digital artwork' },
    { value: 'anime', label: 'üå∏ Anime', description: 'Japanese anime style' },
    { value: '3d-model', label: 'üéÆ 3D Model', description: 'Three-dimensional renders' },
    { value: 'analog-film', label: 'üìπ Analog Film', description: 'Vintage film photography' },
    { value: 'comic-book', label: 'üí• Comic Book', description: 'Comic book illustration' },
    { value: 'fantasy-art', label: 'üßô Fantasy Art', description: 'Magical fantasy scenes' },
    { value: 'line-art', label: '‚úèÔ∏è Line Art', description: 'Clean line drawings' },
    { value: 'neon-punk', label: '‚ö° Neon Punk', description: 'Cyberpunk neon aesthetics' },
    { value: 'origami', label: 'ü¶¢ Origami', description: 'Paper folding style' },
    { value: 'low-poly', label: 'üî∑ Low Poly', description: 'Geometric polygonal art' }
  ];
}

/**
 * Get example prompts for user inspiration
 * @returns {Array<string>}
 */
function getExamplePrompts() {
  return [
    'Professional business meeting in modern office with natural lighting',
    'Futuristic cityscape at sunset with neon lights and flying cars',
    'Cozy coffee shop interior with warm lighting and plants',
    'Minimalist workspace with laptop, coffee, and succulent plants',
    'Tropical beach paradise with crystal clear turquoise water',
    'Abstract colorful geometric patterns with vibrant gradients',
    'Team collaboration in creative studio with whiteboards',
    'Modern fitness gym with exercise equipment and natural light',
    'Inspirational mountain landscape at golden hour sunrise',
    'Tech startup office with diverse team working on laptops'
  ];
}

/**
 * Get platform size options
 * @returns {Array<Object>}
 */
function getPlatformOptions() {
  return [
    { value: 'universal', label: 'üì± Universal', description: 'Works on all platforms (1200x630)' },
    { value: 'linkedin', label: 'üíº LinkedIn', description: 'Optimized for LinkedIn (1200x627)' },
    { value: 'twitter', label: 'üê¶ Twitter', description: 'Optimized for Twitter (1200x675)' },
    { value: 'instagram', label: 'üì∑ Instagram', description: 'Square format (1080x1080)' }
  ];
}

module.exports = {
  generateImage,
  getAvailableStyles,
  getExamplePrompts,
  getPlatformOptions
};
